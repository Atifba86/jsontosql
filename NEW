CREATE OR REPLACE PROCEDURE populate_def (
PPT_PROV_ALLOWED.PROVID OUT NUMBER,
exempted.DEF_STATUS OUT VARCHAR2,
PPT_PROV_ALLOWED.PROV_DESC OUT VARCHAR2,
PPT_PROV_ALLOWED.REMARKS OUT VARCHAR2
)IS

v_total_row number:=0;
v_row_count number:=0;
v_amount  number:=0;
provid number:=0;


BEGIN

v_total_row := row_total('def_record');
 
--------------------------------------------
 if v_total_row = 0 then
    go_block('PPT_PROV_ALLOWED');
    last_record;
    v_row_count := :System.Cursor_Record;
    first_record;
    for j in 1 .. v_row_count loop
   ----sub if
       if :PPT_PROV_ALLOWED.PROVID in (32) then
      delete_Record;
       elsif j!=v_row_count then 
               next_record;
      end if;
   ------sub if end
    end loop;
  :exempted.DEF_STATUS:='A';
    else
     :exempted.DEF_STATUS:='P';

--------------------------------------------


    go_block('PPT_PROV_ALLOWED');
    last_record;
    v_row_count := :System.Cursor_Record;
    first_record;
    for j in 1 .. v_row_count loop
   ----sub if
      if :PPT_PROV_ALLOWED.PROVID in (32) then
      delete_Record;
      elsif j!=v_row_count then 
               next_record;
      end if;
   ------sub if end
    end loop;
  
------------------------------------------------------------
    last_record;
      if  :PPT_PROV_ALLOWED.PROV_DESC is not null  then 
               next_record;
               end if;
  
    FOR j IN 1 .. v_total_row LOOP
    
      v_amount := GET_GROUP_NUMBER_CELL('def_record.amount', j);
      provid := GET_GROUP_NUMBER_CELL('def_record.provid', j);
      :PPT_PROV_ALLOWED.PROVID  := provid;
      :PPT_PROV_ALLOWED.REMARKS := v_amount;
    
      begin
        select PROV_DESC
          into :PPT_PROV_ALLOWED.PROV_Desc
          from exam_allow_reason
         where provid = :PPT_PROV_ALLOWED.provid;
      exception
        when no_data_found then
          :PPT_PROV_ALLOWED.PROV_Desc := null;
      end;
    
      if j != v_total_row then
        next_record;
      end if;
    
    END LOOP;
  
  end if;
  first_record;
END;
